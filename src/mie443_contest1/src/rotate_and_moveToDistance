#include <geometry_msgs/Twist.h>
#include <nav_msgs/Odometry.h>
#include <tf/transform_datatypes.h>
#include <ros/ros.h>
#include <cmath>

// Global variables for odometry
float posX = 0.0, posY = 0.0;

void odomCallback(const nav_msgs::Odometry::ConstPtr& msg) {
    posX = msg->pose.pose.position.x;
    posY = msg->pose.pose.position.y;
}

// Function to move the robot a specified distance in a straight line
void moveDistance(ros::Publisher& vel_pub, float distance) {
    geometry_msgs::Twist vel_msg;
    ros::Rate rate(10); // 10 Hz loop rate

    // Save initial position
    float startX = posX;
    float startY = posY;

    while (ros::ok()) {
        float dx = posX - startX;
        float dy = posY - startY;
        float traveled = sqrt(dx * dx + dy * dy);

        if (traveled >= distance) {
            break; // Stop when the target distance is reached
        }

        vel_msg.linear.x = std::min((distance - traveled) * 2.0f, 0.2f); // Simple proportional control with max speed limit
        vel_pub.publish(vel_msg);

        ros::spinOnce();
        rate.sleep();
    }

    // Stop the robot after reaching the target
    vel_msg.linear.x = 0.0;
    vel_pub.publish(vel_msg);
}

